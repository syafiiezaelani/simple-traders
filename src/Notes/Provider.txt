
Things to do: 
- need to figure out how to pull data from an API? 
    they recommended that i use axios or fetch API. 
    can also wire it to work with redux. 
    DONE

- need to learn about websocket for pricing. cause doesnt make sense to continuously use GET. so have to subscribe to a server and the data will be sent to you whenever there are updates. 
====================================

NOTES 

How to Consume REST APIs in React â€“ a Beginner's Guide: https://www.freecodecamp.org/news/how-to-consume-rest-apis-in-react/

    There are 4 basic things, fetch, POST, DELETE and GET. 
    fetch is pulling data from the server. 
    post is when we send something to API, we will get a response from the server. 
    get is it similar to fetch?? nope, cause fetch is the function we use for API calls, GET is a method that we are sending to the API. GET is the method that is applied by default, thats why you dont need to pass anything when getting data from server, but if you want to uses POST or DELETE then you have to specify in fetch. 

   there is also inbuilt fetch method in js, no library neceesary

       const fetchPosts = () => {
        fetch('https://jsonplaceholder.typicode.com/posts?_limit=10')
        .then(response => response.json())
        .then(data => setData(data));

    }

    useEffect(() => {
        // fetchPosts();
        // console.log("user effect in blotter start")
    })

    ^^ code was use to fetch data from an API. i dont think this is right cause useEffect is gonna run everytime it renders, and since there is setData in the useEffect, there is a loop. 

    improving on the above code: 
      const fetchPosts = async() => {
        const response = await fetch("https://jsonplaceholder.typicode.com/posts?_limit=4");
        const data = await response.json();
        setPosts(data);
    }

    error handling: 

    const fetchPost = async () => {
        try {
            const response = await fetch(
                'https://jsonplaceholder.typicode.com/posts?_limit=10'
            );
            const data = await response.json();
            setPosts(data);
        } catch (error) {
            console.log(error);
        }
    };

